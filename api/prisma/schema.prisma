generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String
  password    String
  phoneNumber String?
  role        UserRole @default(BASIC)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  toys           Toy[]
  offersSend     Offer[] @relation(name: "offersSend")
  offersReceived Offer[] @relation(name: "offersReceived")
}

enum UserRole {
  BASIC
  ADMIN
}

model Toy {
  id                 Int      @id @default(autoincrement())
  name               String
  category           String
  imgUrl             String
  description        String
  address            String
  owner              User     @relation(fields: [ownerId], references: [id])
  ownerId            Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
  offersFromSender   Offer[]  @relation(name: "toyFromSender")
  offersFromReceiver Offer[]  @relation(name: "toyFromReceiver")
}

model Offer {
  id                Int      @id @default(autoincrement())
  sender            User     @relation(name: "offersSend", fields: [senderUserId], references: [id])
  senderUserId      Int
  receiver          User     @relation(name: "offersReceived", fields: [receiverUserId], references: [id])
  receiverUserId    Int
  toyFromSender     Toy      @relation(name: "toyFromSender", fields: [toyFromSenderId], references: [id])
  toyFromSenderId   Int
  toyFromReceiver   Toy      @relation(name: "toyFromReceiver", fields: [toyFromReceiverId], references: [id])
  toyFromReceiverId Int
  status            Status   @default(PENDING)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
}

enum Status {
  ACCEPTED
  DECLINED
  PENDING
}
