generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  email       String     @unique
  name        String
  password    String
  phoneNumber String
  imgUrl      String?
  address     String?
  role        UserRole   @default(BASIC)
  status      UserStatus @default(ACTIVE)
  confirmed   Boolean    @default(false)
  language    Language   @default(EN)
  version     Int        @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  toys           Toy[]
  ratings        Rating[]
  offersSend     Offer[]  @relation(name: "offersSend")
  offersReceived Offer[]  @relation(name: "offersReceived")
}

enum Language {
  EN
  PL
}

model Rating {
  id              String   @id @default(uuid())
  User            User?    @relation(fields: [userId], references: [id])
  userId          String?
  senderOffer     Offer?   @relation(fields: [senderOfferId], references: [id], name: "senderRating")
  receiverOffer   Offer?   @relation(fields: [receiverOfferId], references: [id], name: "receiverRating")
  senderOfferId   String?  @unique
  receiverOfferId String?  @unique
  value           Float
  createdAt       DateTime @default(now())
}

enum UserRole {
  BASIC
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

model Toy {
  id          String        @id @default(uuid())
  name        String
  category    ToyCategories @default(OTHER)
  imgUrl      String
  description String
  owner       User          @relation(fields: [ownerId], references: [id])
  ownerId     String
  status      ToyStatus     @default(UNCONFIRMED)
  version     Int           @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  offersFromSender   Offer[] @relation(name: "toyFromSender")
  offersFromReceiver Offer[] @relation(name: "toyFromReceiver")
}

enum ToyStatus {
  ACTIVE
  UNCONFIRMED
  FINISHED
}

enum ToyCategories {
  FIGURES
  ANIMALS
  CARS
  RADIO_CONTROLLED
  CONSTRUCTION
  CREATIVE
  DOLLS
  EDUCATIONAL
  ELECTRONIC
  EXECUTIVE
  FOOD_RELATED
  GAMES
  PLAYGOUND
  PUZZLE
  LEGO
  SCIENCE
  SOUND
  SPINNING
  WOODEN
  OTHER
}

model Offer {
  id                String      @id @default(uuid())
  sender            User        @relation(name: "offersSend", fields: [senderUserId], references: [id])
  senderUserId      String
  receiver          User        @relation(name: "offersReceived", fields: [receiverUserId], references: [id])
  receiverUserId    String
  toyFromSender     Toy         @relation(name: "toyFromSender", fields: [toyFromSenderId], references: [id])
  toyFromSenderId   String
  toyFromReceiver   Toy         @relation(name: "toyFromReceiver", fields: [toyFromReceiverId], references: [id])
  toyFromReceiverId String
  status            OfferStatus @default(PENDING)
  senderRating      Rating?     @relation(name: "senderRating")
  receiverRating    Rating?     @relation(name: "receiverRating")
  version           Int         @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum OfferStatus {
  ACCEPTED
  DECLINED
  PENDING
}
